plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	//apoli
	maven { url 'https://jitpack.io' }
	//cardinal-components
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}
	//cloth config
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	//modmenu
	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"modid" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	//modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

    modImplementation "com.github.apace100:apoli:${project.apoli_version}"

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand([
			"version": project.version,
			"loader_version": project.loader_version,
			"apoli_version": project.apoli_version
		])
		
	}
processResources {
    // 在处理资源文件之前执行的动作
    doFirst {
        // 定义源目录和目标目录
        def sourceDir = sourceSets.main.resources.srcDirs
        def outputDir = destinationDir

        // 获取源目录下的所有YAML文件
        FileTree yamlFiles = fileTree(dir: sourceDir, include: '**/*.yml')
        yamlFiles.each { File yamlFile ->
            // 使用Groovy内置库将YAML转换为JSON
            def yamlContent = new groovy.yaml.Yaml().load(yamlFile.text)
            def jsonContent = groovy.json.JsonOutput.toJson(yamlContent)
            
            // 创建输出目录
            new File(outputDir).mkdirs()
            
            // 定义JSON文件的输出路径
            def jsonFile = new File(outputDir, yamlFile.name.replace('.yml', '.json'))
            jsonFile.text = jsonContent
        }
    }

    // 排除所有YAML文件，确保它们不会被复制到输出目录
    exclude '**/*.yml'

    // 指定资源文件的新输出目录
    outputs.dir(outputDir)
}
	// 获取资源目录下的所有YAML文件，并转换为JSON
		FileTree yamlFiles = fileTree(dir: 'src/main/resources', include: '**/*.yml')
		yamlFiles.each { File yamlFile ->
            // 使用Jackson库将YAML转换为JSON
            def yamlContent = new groovy.yaml.Yaml().load(yamlFile.text)
            def jsonContent = groovy.json.JsonOutput.toJson(yamlContent)
            def jsonFile = new File(yamlFile.parent, yamlFile.name.replace('.yml', '.json'))
            jsonFile.text = jsonContent
        }
    }
}

}

tasks.register('generateJsonDatapack') {
	doFirst {
		println "start generation datapack with yaml written"
		exec {
			workingDir "build-scripts"
			commandLine "bash", "build-datapack.sh", "${projectDir}/datapack/", "${tasks.processResources.destinationDir.getAbsolutePath()}"
		}
	}
	doLast {
		println "datapack generated!"
	}
}

tasks.named('processResources') {
	dependsOn tasks.generateJsonDatapack
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}