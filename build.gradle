buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.yaml:snakeyaml:1.27'
		//classpath 'org.codehaus.groovy:groovy-json:3.0.17'
	}
}

plugins {
	id 'fabric-loom' version '1.6-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	//apoli, pehkui
	maven { url 'https://jitpack.io' }
	//cardinal-components
	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}
	//cloth config
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	//modmenu
	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"modid" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	//modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	include "com.github.apace100:apoli:${project.apoli_version}"
	modImplementation "com.github.apace100:apoli:${project.apoli_version}"

	//include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cca_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	//include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cca_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modImplementation("com.github.Virtuoel:Pehkui:${pehkui_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
}

import groovy.json.JsonOutput
import java.nio.file.Paths
import org.yaml.snakeyaml.Yaml

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand([
			"version": project.version,
			"loader_version": project.loader_version,
			"apoli_version": project.apoli_version
		])
		
	}
	
	filesMatching("**/*.yml") {
		def yamlContent = new Yaml().load(it.open())
		def jsonContent = JsonOutput.toJson(yamlContent)
		
		def destJsonFilePath = it.getPath().replaceAll("\\.yml\$", ".json")
		def destJsonFile = new File(destinationDir, destJsonFilePath)
		
		destJsonFile.getParentFile().mkdirs()
		destJsonFile.text = jsonContent
		
		println "convert " + it.getPath() + " to " + destJsonFilePath
		
		exclude()
	}

}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}